
#1. Are the exam score variables normally distributed? If not, apply a Box-Cox
#transformation. Does anything change?

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import seaborn as sns
import scipy.stats as stats
from scipy.stats.mstats import winsorize
from sqlalchemy import create_engine
import warnings
from scipy.stats import jarque_bera
from scipy.stats import normaltest
from scipy.stats import boxcox

plt.show()

warnings.filterwarnings('ignore')
sns.set(style="whitegrid")

postgres_user = 'dsbc_student'
postgres_pw = '7*.8G9QH21'
postgres_host = '142.93.121.174'
postgres_port = '5432'
postgres_db = 'studentsperformance'

engine = create_engine('postgresql://{}:{}@{}:{}/{}'.format(
    postgres_user, postgres_pw, postgres_host, postgres_port, postgres_db))

sp_df = pd.read_sql_query('select * from studentsperformance',con=engine)

print(sp_df.info())

sp_df["reading score"].fillna(sp_df["reading score"].mean(),inplace=True)
sp_df["writing score"].fillna(sp_df["writing score"].mean(),inplace=True)
sp_df["math score"].fillna(sp_df["math score"].mean(),inplace=True)
'''
plt.figure(figsize=(18,15))

plt.subplot(2,2,1)
plt.hist(sp_df["reading score"])

plt.subplot(2,2,2)
plt.hist(sp_df["writing score"])

plt.subplot(2,2,3)
plt.hist(sp_df["math score"])

plt.show()
'''

jb_stats = jarque_bera(np.sqrt(sp_df["reading score"]))
norm_stats = normaltest(np.sqrt(sp_df["reading score"]))

print("reading jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("reading norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

jb_stats = jarque_bera(np.sqrt(sp_df["writing score"]))
norm_stats = normaltest(np.sqrt(sp_df["writing score"]))

print("writing jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("writing norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

jb_stats = jarque_bera(np.sqrt(sp_df["math score"]))
norm_stats = normaltest(np.sqrt(sp_df["math score"]))

print("math jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("math norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

reading_boxcox,_ = boxcox(sp_df["reading score"])
writing_boxcox,_ = boxcox(sp_df["writing score"])
math_boxcox,_ = boxcox(sp_df[sp_df["math score"] > 0]["math score"])

jb_stats = jarque_bera(math_boxcox)
norm_stats = normaltest(math_boxcox)

print("math jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("math norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

jb_stats = jarque_bera(writing_boxcox)
norm_stats = normaltest(writing_boxcox)

print("math jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("math norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

jb_stats = jarque_bera(reading_boxcox)
norm_stats = normaltest(reading_boxcox)

print("math jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("math norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

#2. Say we want to use a single variable for the exam scores as our target. For
#this purpose, create a new variable by taking a weighted average of the exam scores.
#Check whether this new variable is normally distributed. If it's not normally
#distributed, apply a Box-Cox transformation and check whether or not the transformed
#variable is normally distributed.

sp_df["new_score"] = (sp_df["reading score"] + sp_df["writing score"] + sp_df[
    "math score"]/3)

jb_stats = jarque_bera(np.sqrt(sp_df["new_score"]))
norm_stats = normaltest(np.sqrt(sp_df["new_score"]))

print("reading jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("reading norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))

ns_boxcox,_ = boxcox(sp_df["new_score"])

jb_stats = jarque_bera(ns_boxcox)
norm_stats = normaltest(ns_boxcox)

print("math jarque bera is {} and p is {}".format(jb_stats[0], jb_stats[1]))
print("math norm is {} and p is {}".format(norm_stats[0], norm_stats[1]))
                 

#3. Which variables seem related to the target variable (the newly created variable
#in the previous question)? If our goal is to explain the determinants of success
#in exams, which variables in our dataset might be useful?

print(sp_df["test preparation course"])
print(sp_df.groupby("test preparation course").mean())
