'''
***UMAP**
Uniform Manifold Approximation and projection runs much faster than t-SNE

It is a general purpose dimensionality reduction technique that can be used for
visualization similar to t-SNE, but also for genetal non-linear dimension reduction

***DIFFERENCES BETWEEN t-SNE and UMAP***

1.UMAP is faster than t-SNE but slower than PCA

2. UMAP can be used for feature engineering

3. We can use UMAP wherever we can use PCA

***UMAP ALGORITHM***
UMAP find the K-nearest neighbor.

UMAP constructs a weighted graph using the ditance between points.

UMAP minimizes the total cross-entropy using an optimized method like Stochastic gradient
Descent. This step is iterative and continues until convergance

***IMPORTANT POINTS TO CONSIDER***
UMAP is better for getting a big picture view

UMAP is affected by the metric used
'''
import numpy as np
import matplotlib.pyplot as plt

import time

from sklearn.datasets import fetch_openml

import umap as um

# We load the MNIST dataset below
print('works')
um.UMAP()
mnist = fetch_openml('mnist_784', version=1, cache=True)
print('works')
np.random.seed(123)

indices = np.random.choice(70000,10000)
X = mnist.data[indices] / 255.0
y = mnist.target[indices]

print(X.shape, y.shape)

time_start = time.time()

umap_results = umap.UMAP(n_neighbors=5,
                      min_dist=0.3,
                      metric='correlation').fit_transform(X)

print('UMAP done! Time elapsed: {} seconds'.format(time.time()-time_start))

plt.figure(figsize=(10,5))
colours = ["r","b","g","c","m","y","k","r","burlywood","chartreuse"]
for i in range(umap_results.shape[0]):
    plt.text(umap_results[i, 0], umap_results[i, 1], y[i],
             color=colours[int(y[i])],
             fontdict={'weight': 'bold', 'size': 50}
        )

plt.xticks([])
plt.yticks([])
plt.axis('off')
plt.show()

plt.figure(figsize=(10,5))
plt.scatter(umap_results[:, 0], umap_results[:, 1])
plt.xticks([])
plt.yticks([])
plt.axis('off')
plt.show()
