import pandas as pd
import numpy as np
import sqlalchemy.engine as se
import warnings

warnings.filterwarnings('ignore')
#1. Determine all the variable types and find the fraction of the missing
#values for each variable
postgres_user = 'dsbc_student'
postgres_pw = '7*.8G9QH21'
postgres_host = '142.93.121.174'
postgres_port = '5432'
postgres_db = 'useducation'

engine = se.create_engine('postgresql://{}:{}@{}:{}/{}'.format(
    postgres_user, postgres_pw, postgres_host, postgres_port, postgres_db))

useducation_df = pd.read_sql_query('select * from useducation', con=engine)

useducation_df.info()

#2.Notice that the data has a time dimension (year). For this assignment,
#forget about time and treat all the observations as if they're from the
#same year. Choose a strategy to deal with the missing values for each
#variables. For which variables would filling in the missing values with
#some value make sense? For which might tossing out the records entirely
#make sense?


#For revenue we can use imputation, selecting a mean or median of
#the different revnue types. Same for expenditure. This is because
#these values are continous, not categorical
'''
useducation_df["TOTAL_REVENUE"].fillna(useducation_df["TOTAL_REVENUE"].mean(), inplace=True)
useducation_df["TOTAL_EXPENDITURE"].fillna(useducation_df["TOTAL_EXPENDITURE"].mean(), inplace=True)
'''

#for categorical variables, like grades, they are all ordinal so
#we can replace the null value with the value nearest to it
#same goes for the math score.
'''
for i in range(0, len(useducation_df["GRADES_PK_G"])):
    if useducation_df["GRADES_PK_G"][i] == 0:
        useducation_df["GRADES_PK_G"][i] = useducation_df["GRADES_PK_G"][i-1]
'''

#3. Now, take into account the time factor. Replicate your second answer but
#this time fill in the missing values by using a statistic that is calculated
#within the year of the observation. For example, if you want to fill a
#missing value for a variable with the mean of that variable, calculate
#the mean by using only the observations for that specific year

years_list = useducation_df["TOTAL_REVENUE"].groupby(useducation_df["YEAR"]).mean()

#4. Use interpolation instead (Trouble with interpolation error
#No axis named 1 for object type


for i in range(0, len(useducation_df["TOTAL_REVENUE"])):
 #   if np.isnan(useducation_df["TOTAL_REVENUE"][i]):
 #       useducation_df["TOTAL_REVENUE"][i] = 0

#Select the column on the right and interpolating that to the right column
 #(one to one match)
    useducation_df["TOTAL_REVENUE"] = useducation_df["TOTAL_REVENUE"].interpolate('nearest')
     

#if useducation_df["TOTAL_REVENUE"]

#Compare your results for the 2nd, 3rd, and 4th questions. Do you find
#any meaningful differences?

#5. No meaningful difference





'''
#Correct answers:
import pandas as pd
import matplotlib.pyplot as plt
from sqlalchemy import create_engine
import warnings

warnings.filterwarnings('ignore')


postgres_user = 'dsbc_student'
postgres_pw = '7*.8G9QH21'
postgres_host = '142.93.121.174'
postgres_port = '5432'
postgres_db = 'useducation'

engine = create_engine('postgresql://{}:{}@{}:{}/{}'.format(
    postgres_user, postgres_pw, postgres_host, postgres_port, postgres_db))

education_df = pd.read_sql_query('select * from useducation',con=engine)

# no need for an open connection, 
# as we're only doing a single query
engine.dispose()

#1
#1. Determine all the variable types and then find the fraction of the missing values for each variable.
education_df.info()
education_df.isnull().sum()/education_df.isnull().count()

#2. 
# 2. Notice that the data has a time dimension (year). For this assignment, forget about the time and treat
# all the observations as if they're from the same year. Choose a strategy to deal with the missing values
# for each variables. For which variables, filling in the missing values with some value makes more sense 
# and for which it doesn't


education2_df = education_df.copy()

fill_list = ["ENROLL", "TOTAL_REVENUE", "FEDERAL_REVENUE", 
             "STATE_REVENUE", "LOCAL_REVENUE", "TOTAL_EXPENDITURE", 
             "INSTRUCTION_EXPENDITURE", "SUPPORT_SERVICES_EXPENDITURE",
             "OTHER_EXPENDITURE", "CAPITAL_OUTLAY_EXPENDITURE", "GRADES_PK_G", 
             "GRADES_KG_G", "GRADES_4_G", "GRADES_8_G", "GRADES_12_G", "GRADES_1_8_G", 
             "GRADES_9_12_G", "GRADES_ALL_G"]

for col in fill_list:
    education2_df.loc[:, col].fillna(education2_df.loc[:, col].mean(), inplace=True)

#3. Now, take into account the time factor. Replicate your second answer but this time fill in the missing
#values by using a statistic that is calculated within the year of the observation. For example, if you want
#to fill a missing value for a variable with the mean of that variable, calculate the mean by using only the 
# observations for that specific year.

education3_df = education_df.copy()

years = education3_df["YEAR"].unique()

for col in fill_list:
    for year in years:
        education3_df.loc[education3_df["YEAR"] == year, col].fillna(
            education3_df[education3_df["YEAR"] == year][col].mean(), inplace=True)


#4. This time, fill in the missing values using interpolation (extrapolation).

education4_df = education_df.copy()

for col in fill_list:
    education4_df.loc[:, col].interpolate(inplace=True)
    
#compare them

fig = plt.figure(figsize=(20,100))

for i, col in enumerate(fill_list):
    df = pd.concat([education_df[col], education2_df[col],
                     education3_df[col], education4_df[col]], axis=1)
    
    plt.subplot(len(fill_list), 4, i+1)
    plt.bar(["original", "overall", "year-by-year", "interpolation"], df.median())
    plt.xticks(rotation='vertical')
    plt.title("Mod of {}".format(col))
    
plt.tight_layout()
plt.show()
'''        
        
    



